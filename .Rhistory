authors <- data.frame(
surname = I(c("Tukey", "Venables", "Tierney", "Ripley", "McNeil")),
nationality = c("US", "Australia", "US", "UK", "Australia"),
deceased = c("yes", rep("no", 4)))
books <- data.frame(
name = I(c("Tukey", "Venables", "Tierney",
"Ripley", "Ripley", "McNeil", "R Core")),
title = c("Exploratory Data Analysis",
"Modern Applied Statistics ...",
"LISP-STAT",
"Spatial Statistics", "Stochastic Simulation",
"Interactive Data Analysis",
"An Introduction to R"),
other.author = c(NA, "Ripley", NA, NA, NA, NA,
"Venables & Smith"))
m1 <- merge(authors, books, by.x = "surname", by.y = "name")
m1
authors
books
m1 <- merge(authors, books, by.x = "surname", by.y = "name")
m1
m2 <- merge(books, authors, by.x = "name", by.y = "surname")
m2
head(reviews,3)
head(solutions, 3)
head(mergedData, 3)
df1 = data.frame(id=sample(1:10),x=rnorm(10))
df2 = data.frame(id=sample(1:10),y=rnorm(10))
df3 = data.frame(id=sample(1:10),z=rnorm(10))
dfList = list(df1,df2,df3)
dfList
join_all(dfList)
library(plyr)
install.packages("plyr")
join_all(dfList)
library(plyr)
join_all(dfList)
join(df1,df2)
arrange(join(df1,df2),id)
setwd("/Volumes/Users/Public/Statistics public/Coursera/Getting & Cleaning Data/Project")
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(fileUrl)
temp <- tempfile()
download.file(fileUrl, temp)
fileUrl <- "http://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
temp <- tempfile()
download.file(fileUrl, temp)
d1 = date()
class(d1)
d2 = Sys.Date()
class(d2)
format(d2,"%a %b %d")
x = c("1jan1960", "2jan1960", "31mar1960", "30jul1960")
z = as.Date(x, "%d%b%Y")
z
z[1] - z[2]
weekdays(d2)
months(d2)
dafa
julian(d2)
library(lubridate)
install.packages("lubridate")
library(lubridate)
ymd("20140108")
mdy("08/04/2013")
dmy("03-04-2013")
ymd_hms("2011-08-03 10:15:03")
ymd_hms("2011-08-03 10:15:03",tz="Pacific/Auckland")
cat(paste("* The value of y[", 1:3, "] is ", y[1:3], sep="", collapse="\n"))
source('~/.active-rstudio-document', echo=TRUE)
install.packages("xtable")
rep(1:2,5)
boxplot(1:10~rep(1:2,5))
boxplot(1:10~1)
boxplot(1:10~rep(1,5))
?boxplot
boxplot(1:10~rep(1,10))
boxplot(1:10~rep(2,10))
boxplot(1:10~rep(1,10))
boxplot(1:10~rep(2,10))
boxplot(1:10~rep(1:2,5))
```
cat("Here are some dot points\n\n")
?cat
cat("* The value of y[", 1:3, "] is ")
cat(paste("* The value of y[", 1:3, "] is "))
cat(paste("* The value of y[", 1:3, "] is "), collapse=\n)
cat(paste("* The value of y[", 1:3, "] is "), collapse="\n")
cat(paste("* The value of y[", 1:3, "] is ", collapse="\n"))
cat(paste("* The value of y[1:3] is ", collapse="\n"))
?paste
cat(paste("* The value of y[",1:3,"] is ", collapse="\n"))
cat(paste("* The value of y[",1:3,"] is ", collapse="\n"))
cat(paste("* The value of y["1:3"] is ", collapse="\n"))
,
cat(paste("* The value of y[",1:3, "] is ", collapse="\n"))
cat(paste("* The value of y[",1:3,"] is ", collapse="\n"))
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
cat(paste("* The value of y[",1:3,"] is ", collapse="\n"))
cat(paste("* The value of y[",1:3,"] is ", y[1:3], sep="", collapse="\n"))
nosim <- 1000
n <- 10
sd(apply(matrix(rnorm(nosim * n), nosim), 1, mean))
apply(matrix(rnorm(nosim * n), nosim)
apply(matrix(rnorm(nosim * n), nosim), 1, mean)
apply(matrix(rnorm(nosim * n), nosim), 1, mean)
matrix(rnorm(nosim * n), nosim)
rnorm(nosim * n)
?matrix
matrixx <- matrix(rnorm(nosim * n), nosim)
View(matrixx)
sd(apply(matrix(rnorm(nosim * n), nosim), 1, mean))/sqrt(n)
1 / sqrt(n)
sd(apply(matrix(rnorm(nosim * n), nosim), 1, mean))/sqrt(n)
sd(apply(matrix(rnorm(nosim * n), nosim), 1, mean))
1/12
sd(apply(matrix(rnorm(nosim * n), nosim), margin = 1, mean))
sd(apply(matrix(rnorm(nosim * n), nosim), MARGIN = 1, mean))
sd(apply(matrix(rnorm(nosim * n), nosim), MARGIN = 1, mean))
sd(apply(matrix(rnorm(nosim * n), nosim), margin = 1, mean))
sd(apply(matrix(rnorm(nosim * n), nosim), MARGIN = 1, mean))
1 / sqrt(n)
sd(apply(matrix(runif(nosim * n), nosim), MARGIN = 1, mean))
sqrt(1/12) / sqrt(n)
sd(apply(matrix(runif(nosim * n), nosim), MARGIN = 1, mean))
sqrt(1/12) / sqrt(n)
sd(apply(matrix(rpois(nosim * n, 4), nrow = nosim), MARGIN = 1, mean))
2 / sqrt(n)
sd(apply(matrix(sample(0:1, size=nosim*n, replace=TRUE) nrow = nosim), MARGIN = 1, mean))
sd(apply(matrix(sample(0:1, size=nosim*n, replace=TRUE) nrow = nosim), MARGIN = 1, mean))
sd(apply(matrix(sample(0:1, size=nosim*n, replace=TRUE), nrow = nosim), MARGIN = 1, mean))
sd(apply(matrix(sample(0:1, size=nosim*n, replace=TRUE), nrow = nosim), MARGIN = 1, mean))
matrix(sample(0:1, size=nosim*n, replace=TRUE), nrow = nosim)
sqrt(0.25)
sqrt(0.25)/sqrt(n)
sd(apply(matrix(sample(0:1, size=nosim*n, replace=TRUE), nrow = nosim), MARGIN = 1, mean))
sd(apply(matrix(sample(0:1, size=nosim*n, replace=TRUE), nrow = nosim), MARGIN = 1, mean))
sqrt(0.25)/sqrt(n)
library(UsingR); data(father.son)
install.packages("UsingR")
library(UsingR); data(father.son)
father.son
View(father.son)
dim(data(father.son))
dimx(father.son))
dimx(father.son)
dim(father.son)
attributes(father.son)
x <- father.son$sheight
n <- length(x)
round(c(var(x), var(x)/n, sd(x), sd(x)/sqrt(n)),2)
?choose
?choose
?choose
choose(8, 7) * 0.5^8 + choose(8, 8) * 0.5^8
pbinom(6, size=8, prob=0.5, lower.tail=FALSE)
qnorm(0.95, mean = mu, sd = sd)
pnorm(1160, mean = 1029, sd = 50, lower.tail=FALSE)
(1160 - 1020)/50
pnorm((1160 - 1020)/50
, lower.tail=FALSE)
pnorm(1160, mean = 1020, sd = 50, lower.tail=FALSE)
qnorm(0.75, mean = 1020, sd = 50)
ppois(3, lambda = 2.5*4)
ppois(40, lambda = 9*5)
pbinom(2, size = 500, prob = 0.01)
ppois(2, lambda = 500*0.1)
ppois(2, lambda = 500*0.01)
n <- 1000
means <- cumsum(rnorm(n))/(1:n)
means
means <- cumsum(sample(0:1, n, replace = TRUE))/(1:n)
means
pbinom(45, 100, 0.5) #= 0.18
library(UsingR)
data(father.son)
x <- father.son$sheight
( mean(x) + c(-1,1) * 1norm(0.975) * sd(x)/sqrt(length(x)) ) / 12
( mean(x) + c(-1,1) * qnorm(0.975) * sd(x)/sqrt(length(x)) ) / 12
mean(x) + qnorm(c(0.025, 0.975)) * sd(x) / sqrt(length(x))
x <- father.son$fheight
mean(x) + qnorm(c(0.025, 0.975)) * sd(x) / sqrt(length(x))
0.56 + c(-1, 1) * qnorm(0.975) * sqrt(0.56 * 0.44/100)
binom.test(56, 100)
binom.test(56, 100)$conf.int
lambda + c(-1, 1) * qnorm(0.975) * sqrt(lambda/t)
x <- 5
t <- 94.32
lambda <- x/t
lambda + c(-1, 1) * qnorm(0.975) * sqrt(lambda/t)
x <- 5
t <- 94.32
lambda <- x/t
lambda + c(-1, 1) * qnorm(0.975) * sqrt(lambda/t)
poisson.test(x, T=94.32)$conf
poisson.test(10 * 60, 60)
pnorm(70, mean = 80, sd = 10)
qnorm(0.95, mean= 1100, sd = 75)
qnorm(0.95, mean= 1100, sd = 75/sqrt(100))
pbinom((4:5), size=5, prob=0.5, lower.tail=FALSE)
pbinom(4, size=5, prob=0.5, lower.tail=FALSE)
pbinom(3, size=5, prob=0.5, lower.tail=FALSE)
pnorm(16, mean = 14, sd=10/sqrt(100)) - pnorm(14, mean = 14, sd=10/sqrt(100))
pnorm(16, mean = 15, sd=10/sqrt(100)) - pnorm(14, mean = 15, sd=10/sqrt(100))
sqrt(1/12)/sqrt(1000)
sqrt(1/12)/sqrt(100)
ppois(10, lambda = 5*3)
AvgEarnings = 1*0.5+(-1)*0.5
1*0.5+(-1)*0.5
(1-0)^2*0.5 + (-1-0)^2*0.5
data(sleep)
head(sleep)
source('~/Statistics/R Learning/John\'s Hopkins - Statistical inference/Confidence Intervals.R', echo=TRUE)
sleep
mn + c(-1, 1) * qt(0.975, n-1) * s/sqrt(n)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
mn + c(-1, 1) * qt(0.975, n-1) * s/sqrt(n)
t.test(difference)
t.test(g1, g2, pair = TRUE)
t.test(g1, g2, paired = TRUE)
t.test(g1, g2, paired = TRUE)
source('~/.active-rstudio-document', echo=TRUE)
g1 <- sleep$extra[1:10]
g2 <- sleep$extra[11:20]
difference <- g2 - g1
mn <- mean(difference)
s <- sd(difference)
n <- 10
mn + c(-1, 1) * qt(0.975, n-1) * s/sqrt(n)
t.test(difference)
t.test(g1, g2, paired = TRUE)
t.test(g2, g1, paired = TRUE)
sleep
t.test(extra ~ I(reveal(group)), paired = TRUE, data = sleep)
source('~/.active-rstudio-document', echo=TRUE)
data(sleep)
sleep
g1 <- sleep$extra[1:10]
g2 <- sleep$extra[11:20]
difference <- g2 - g1  #the order is specific, shch that the subjects are paired.
# e.g. 1 & 11 are the same subjects, 2 & 12 etc
mn <- mean(difference)
s <- sd(difference)
n <- 10
t.test(extra ~ I(reveal(group)), paired = TRUE, data = sleep)
t.test(extra ~ I(relevel(group)), paired = TRUE, data = sleep)
t.test(extra ~ I(relevel(group, 2)), paired = TRUE, data = sleep)
t.test(extra ~ group, data = sleep)
t.test(extra ~ I(relevel(group, 2)), paired = TRUE, data = sleep)
relevel(group, 2)
relevel(sleep$group, 2)
relevel(sleep$group)
relevel(sleep$group, 2)
sleep$group
I(relevel(sleep$group, 2))
I(relevel(sleep$group, 2))
relevel(sleep$group, 2)
t.test(extra ~ relevel(group, 2), paired = TRUE, data = sleep)
t.test(extra ~ I(relevel(group, 2)), paired = TRUE, data = sleep)
t.test(extra ~ relevel(group, 2), paired = TRUE, data = sleep)
data(ToothGrowth)
head(ToothGrowth)
ToothGrowth
?ToothGrowth
source('~/.active-rstudio-document', echo=TRUE)
data <- ToothGrowth
data$dose <- factor(data$dose)
levels(data$supp) <- c("Orange Juice", "Ascorbic Acid") str(data)
levels(data$supp) <- c("Orange Juice", "Ascorbic Acid")
str(data)
str(data)
summary(data)
ggplot(data, aes(x = dose, y = len)) + geom_boxplot(aes(fill = dose)) + facet_wrap(. ~ supp)
library(ggplot2)
ggplot(data, aes(x = dose, y = len)) + geom_boxplot(aes(fill = dose)) + facet_wrap(. ~ supp)
ggplot(data, aes(x = dose, y = len)) + geom_boxplot(aes(fill = dose)) + facet_wrap( ~ supp)
ggplot(data, aes(x = dose, y = len)) + geom_boxplot(aes(fill = dose)) + facet_wrap(. ~ supp)
ggplot(data, aes(x = dose, y = len)) + geom_boxplot(aes(fill = dose)) + facet_grid(. ~ supp)
ggplot(data, aes(x = dose, y = len)) + geom_boxplot(aes(fill = dose)) + facet_wrap( ~ supp)
ggplot(data, aes(x = dose, y = len)) + geom_boxplot(aes(fill = dose)) + facet_grid(. ~ supp)
gplot(data, aes(x = dose, y = len)) + geom_boxplot(aes(fill = dose))
ggplot(data, aes(x = dose, y = len)) + geom_boxplot(aes(fill = dose))
ggplot(data, aes(x = dose, y = len)) + geom_boxplot(aes(fill = dose)) + facet_grid(. ~ supp) +
xlab("Dose in milligrams") + ylab("Tooth length")
len[dose = 0.5, ]
data[data$dose == 0.5, ]
t.test(len ~ dose, paired=F, var.equal=F, data=data[data$dose == 0.5, ])
t.test(len ~ supp, paired=F, var.equal=F, data=data[data$dose == 0.5, ])
t.test(len ~ supp, paired=F, var.equal=T, data=data[data$dose == 0.5, ])
t.test(len ~ supp, paired=F, var.equal=F, data=data[data$dose == 0.5, ])
t.test(len ~ supp, paired=F, var.equal=F, data=data[data$dose == 1, ])
t.test(len ~ supp, paired=F, var.equal=F, data=data[data$dose == 2, ])
t.test(len ~ supp, paired=F, var.equal=F, data=data[data$dose == 0.5, ])
difference <- data[supp == "Orange Juice", ]
difference <- data[supp == "Orange Juice", ]
head(ToothGrowth)
data <- ToothGrowth
data$dose <- factor(data$dose)
levels(data$supp) <- c("Orange Juice", "Ascorbic Acid")
str(data)
head(ToothGrowth)
difference <- data[supp == "OJ", ]
data[supp == "OJ", ]
difference <- data[data$supp == "OJ", ]
difference <- data[data$supp == "OJ", ] - data[data$supp == "OJ", ]
difference <- data[data$supp == "OJ", ] - data[data$supp == "VC", ]
difference
head(ToothGrowth)
?t.test
rep(1000, 9)
?qt
qt(.975, 8)
1000 + c(-1,1) * qt(.975, 8) * 30/sqrt(9)
1100 + c(-1,1) * qt(.975, 8) * 30/sqrt(9)
s = 6/qt(.975, 8)
s
(3 - 5) * c(-1,1) * qt(.975, 18)  * sqrt((0.6+0.968)/2/18)
(3 - 5) + c(-1,1) * qt(.975, 18)  * sqrt((0.6+0.968)/2/18)
(3 - 5) + c(-1,1) * qt(.975, 18)  * sqrt((0.6+0.68)/2/18)
(3 - 5) + c(-1,1) * qt(.975, 18)  * sqrt((0.6+0.68)/10)
(3 - 5) + c(-1,1) * qt(.975, 18)  * sqrt((0.6+0.68)/10)
(3 - 5) + c(-1,1) * qt(.9, 18)  * sqrt((0.6+0.68)/10)
4 - 6 + c(-1, 1) * qnorm(.975) * sqrt(0.5^2/10 + 2^2/10)
Sp <- sqrt((1.5^2 + 1.8^2)/2)
4 - 6 + c(-1, 1) * qnorm(.975) * sqrt(0.5^2/10 + 2^2/10)
4 - 6 + c(-1, 1) * qnorm(.975) * sqrt(0.5^2/99 + 2^2/99)
-3 - 1 + c(-1,1) * qt(.95, 16) * sqrt(Sp^2 / 10 )
-3 - 1 + c(-1,1) * qt(.95, 16) * sqrt(2*Sp^2 / 10 )
-3 - 1 + c(-1,1) * qt(.95, 16) * sqrt(2*Sp^2 / 9 )
-3 - 1 + c(-1,1) * qt(.95, 16) * sqrt(Sp^2/9 + Sp^2/9)
1100 + c(-1,1) * qt(.975, 8) * 30/sqrt(9)
-2 + qt(.975, 8) * s/3 = 0
s = 6/qt(.975, 8)
s
(3 - 5) + c(-1,1) * qt(.975, 18)  * sqrt((0.6+0.68)/10)
4 - 6 + c(-1, 1) * qnorm(.975) * sqrt(0.5^2/99 + 2^2/99)
Sp <- sqrt((1.5^2 + 1.8^2)/2)
-3 - 1 + c(-1,1) * qt(.95, 16) * sqrt(Sp^2/9 + Sp^2/9)
lambda = 0.2
n = 40 # the size of the sample
noSim = 1000 # the number of simulations
meanExp = 1/lambda # Expexted average of the exponential distribution
mediaExp = meanExp
sdExp = 1/lambda # Expected standard deviation of the exponential
se = sdExp/sqrt(n)  # Theoretical standard error - Expected sd of the exponential means.
set.seed(10) # Creating 10000 means of 40 values
values <- matrix(rexp(noSim * n, rate=0.2), nrow = noSim) # matrix of 40(values) x 1000(simulations)
means <- apply(values, MARGIN = 1, mean) # means of each simulation
seSim <- sd(means)  # standard error of the simulations - observed sd of the simulated means
meanSim <- mean(means) # observed mean of the simulated exponential means
mediaSim <- mean(means) # observed median of the simulated exponential means
library(ggplot2)
dat2 = data.frame(means)
g <- ggplot(dat2, aes(x=means)) + geom_histogram(alpha = .20, binwidth=0.2, colour = "black")
g
g <- ggplot(dat2, aes(x=means)) + geom_histogram(alpha = .20, binwidth=0.2, colour = "black", aes(y = ..density..))
g
g <- ggplot(dat2, aes(x=means)) + geom_histogram(alpha = .20, binwidth=0.2, colour = "black", aes(y = ..frequency..))
g
g + stat_function(fun = dnorm, args = c(mean=meanExp, sd=se), size=1)
g <- ggplot(dat2, aes(x=means)) + geom_histogram(alpha = .20, binwidth=0.2, colour = "black", aes(y = ..density..))
g + stat_function(fun = dnorm, args = c(mean=meanExp, sd=se), size=1)
g <- ggplot(dat2, aes(x=means)) + geom_histogram(alpha = .20, binwidth=0.2, colour = "black", aes(y = ..density..))
g <- g + xlab("Sample Means") + ylab("Frequency") + ggtitle("Distribution of Sample Means")
g <- g + geom_vline(xintercept = meanExp, size = 1)
g + stat_function(fun = dnorm, args = c(mean=meanExp, sd=se), size=1)
g <- ggplot(dat2, aes(x=means)) + geom_histogram(alpha = .20, binwidth=0.2, colour = "black",
fill="blue", aes(y = ..density..))
g + stat_function(fun = dnorm, args = c(mean=meanExp, sd=se), size=1)
g <- g + geom_vline(xintercept = meanExp, size = 1)
g + stat_function(fun = dnorm, args = c(mean=meanExp, sd=se), size=1)
qplot(sample = dat2, stat="qq")
ggplot(dat2, aes(x=means)) + stat_qq()
ggplot(dat2, means = ) + stat_qq()
ggplot(dat2, sample = means) + stat_qq()
ggplot(dat2, aes(sample = means) + stat_qq()
ggplot(dat2, aes(sample = means)) + stat_qq()
ggplot(dat2, aes(sample = means)) + stat_qq() + geom_smooth(method="lm", se=FALSE)
ggplot(dat2, aes(sample = means)) + stat_qq() + geom_smooth(method="lm", se=FALSE)
ggplot(dat2, aes(sample = means)) + stat_qq()
ggplot(dat2, aes(sample = means)) + stat_qq() + geom_point(stat = "qq")
ggplot(dat2, aes(sample = means)) + stat_qq() + stat_qq(dist=qunif)
plot(x=rand(Normal(), 100), y=Normal(), Stat.qq, Geom.point)
ggplot(dat2, aes(sample = means)) + stat_qq() + geom_smooth(method="lm")
ggplot(dat2, aes(sample = means)) + stat_qq() + geom_smooth(method="lm")
ggplot(dat2, aes(sample = means)) + stat_qq()
ggplot(dat2, aes(sample = means)) + stat_qq() + geom_smooth(aes(method="lm"))
ggplot(dat2, aes(sample = means)) + stat_qq(geom="point") +
stat_qq(geom="path")
ggplot(dat2, aes(sample = means)) + stat_qq() +
geom_smooth(method ="lm", aes(x = ..theoretical.., y = ..sample..), stat = "qq")
ggplot(dat2, aes(sample = means)) + stat_qq() +
geom_smooth(method ="lm", aes(x = ..theoretical.., y = ..sample..))
ggplot(dat2, aes(sample = means)) + stat_qq() + geom_smooth(method ="lm", aes(x = ..theoretical.., y = ..sample..), stat = "qq")
ggplot(dat2, aes(sample = means)) + stat_qq() + geom_abline()
ggplot(dat2, aes(sample = means)) + stat_qq() + geom_abline()
ggplot(dat2, aes(sample = means)) + stat_qq() + geom_abline()
getwd()
ggplot(dat2, aes(sample = means)) + stat_qq()
ggplot(dat2, aes(sample = means)) + stat_qq() + geom_abline(intercept = -2.5)
ggplot(dat2, aes(sample = means)) + stat_qq() + geom_abline(intercept = 0
ggplot(dat2, aes(sample = means)) + stat_qq() + geom_abline(intercept = 0)
ggplot(dat2, aes(sample = means)) + stat_qq() + geom_abline(intercept = 0)
ggplot(dat2, aes(sample = means)) + stat_qq() + geom_abline(intercept = 2)
ggplot(dat2, aes(sample = means)) + stat_qq() + geom_abline(intercept = 4)
ggplot(dat2, aes(sample = means)) + stat_qq() + geom_abline(intercept = 6)
ggplot(dat2, aes(sample = means)) + stat_qq() + geom_abline(intercept = 5)
ggplot(dat2, aes(sample = means)) + stat_qq() + geom_abline(intercept = 5, b=1)
ggplot(dat2, aes(sample = means)) + stat_qq() + geom_abline(intercept = 5, b=2)
ggplot(dat2, aes(sample = means)) + stat_qq() + geom_abline(intercept = 5, slope=2)
ggplot(dat2, aes(sample = means)) + stat_qq() + geom_abline(intercept = 5, slope=1)
ggplot(dat2, aes(sample = means)) + stat_qq() + geom_abline(intercept = 5, slope=1)
ggplot(dat2, aes(sample = 2*means)) + stat_qq() + geom_abline(intercept = 5, slope=1)
ggplot(dat2, aes(sample = means-5)) + stat_qq() + geom_abline(intercept = 5, slope=1)
ggplot(dat2, aes(sample = means-5)) + stat_qq() + geom_abline()
meanSim
ggplot(dat2, aes(sample = means)) + stat_qq() + geom_abline(intercept = 5, slope=1)
ggplot(dat2, aes(sample = means - 5)) + stat_qq() + geom_abline()
ggplot(dat2, aes(sample = means)) + stat_qq() + geom_abline(intercept = 5, slope=1)
ggplot(dat2, aes(sample = means - 5)) + stat_qq() + geom_abline()
ggplot(dat2, aes(sample = means)) + stat_qq() + geom_abline(intercept = 5, slope=1)
ggplot(dat2, aes(sample = means - 5)) + stat_qq() + geom_abline()
ggplot(dat2, aes(sample = means)) + stat_qq() + geom_abline(intercept = 5, slope=1)
ggplot(dat2, aes(sample = means)) + stat_qq() + geom_abline(aes(intercept = meanSim, slope=1))
ggplot(dat2, aes(sample = means)) + stat_qq() + geom_abline(aes(intercept = meanSim, slope=1))
ggplot(dat2, aes(sample = means)) + stat_qq() + geom_abline(aes(intercept = mean(means), slope=1))
ggplot(dat2, aes(sample = means)) + stat_qq()
ggplot(dat2, aes(sample = means)) + stat_qq() + geom_abline(aes(intercept = mean(means), slope=1))
g <- ggplot(dat2, aes(x=means)) + geom_histogram(alpha = .20, binwidth=0.2, colour = "black",
fill="blue", aes(y = ..density..))
g <- g + xlab("Sample Means") + ylab("Frequency") + ggtitle("Distribution of Sample Means")
g <- g + geom_vline(xintercept = meanExp, size = 1)
g + stat_function(fun = dnorm, args = c(mean=meanExp, sd=se), size=1)
g <- ggplot(dat2, aes(x=means)) + geom_histogram(alpha = .20, binwidth=0.15, colour = "black",
fill="blue", aes(y = ..density..))
g <- g + xlab("Sample Means") + ylab("Frequency") + ggtitle("Distribution of Sample Means")
g <- g + geom_vline(xintercept = meanExp, size = 1)
g + stat_function(fun = dnorm, args = c(mean=meanExp, sd=se), size=1)
g <- ggplot(dat2, aes(x=means)) + geom_histogram(alpha = .20, binwidth=0.15, colour = "black")
g <- g + xlab("Sample Means") + ylab("Frequency") + ggtitle("Distribution of Sample Means")
g <- g + geom_vline(xintercept = meanExp, size = 1)
# Generate scaled data from a normal distribution
# x-axis
x <- seq(meanExp-4*se, meanExp+4*se,length=100)  #length (-4,4) theoretical standard errors from the mean
#y-axis
y <- dnorm(x, mean=meanExp, sd = se) # generate 100 normal density values.
y = y*noSim*0.2   #adjust the normal values to the Frequencies. 0.2 stands for the binwidth.
xy=data.frame(cbind(x,y))
# Overlay the normal curve in the histogram
g + geom_point(data = xy, aes(x = x, y = y, colour = 'Normal'))
g <- ggplot(dat2, aes(x=means)) + geom_histogram(alpha = .20, binwidth=0.15, colour = "black")
g <- g + xlab("Sample Means") + ylab("Frequency") + ggtitle("Distribution of Sample Means")
g <- g + geom_vline(xintercept = meanExp, size = 1)
# Generate scaled data from a normal distribution
# x-axis
x <- seq(meanExp-4*se, meanExp+4*se,length=100)  #length (-4,4) theoretical standard errors from the mean
#y-axis
y <- dnorm(x, mean=meanExp, sd = se) # generate 100 normal density values.
y = y*noSim*0.15   #adjust the normal values to the Frequencies. 0.2 stands for the binwidth.
xy=data.frame(cbind(x,y))
# Overlay the normal curve in the histogram
g + geom_point(data = xy, aes(x = x, y = y, colour = 'Normal'))
setwd("~/Statistics/Courses/Reproducible Research/Peer Assesments/Peer Assessment 2")
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2",
destfile = "weatherdata.csv.bz2", method = "curl")
head(storm)
storm <- read.csv(bzfile("data/repdata-data-StormData.csv.bz2"))
storm <- read.csv(bzfile("data/weatherdata.csv.bz2"))
storm <- read.csv(bzfile("weatherdata.csv.bz2"))
head(storm)
length(unique(storm$EVTYPE))
storm$EVTYPE
event_types <- gsub(pattern = "[[:blank:][:punct:]+]", replacement = " ", x = event_types)
event_types <- tolower(storm$EVTYPE)
event_types <- gsub(pattern = "[[:blank:][:punct:]+]", replacement = " ", x = event_types)
(unique(event_types))
length(unique(event_types))
length(unique(storm$EVTYPE))
head(event_types)
storm$EVTYPE <- event_types
head(storm)
names(storm)
library(plyr)
casualties <- ddply(storm, .(EVTYPE), summarize,
fatalities = sum(FATALITIES),
injuries = sum(INJURIES))
casualties
unique(storm$EVTYPE)
casualties
length(unique(event_types))
unique(event_types)
storm <- read.csv(bzfile("weatherdata.csv.bz2"))
unique(storm$EVTYPE)
event_types <- tolower(storm$EVTYPE)
event_types <- gsub(pattern = "[[:blank:][:punct:]+]", replacement = " ", x = event_types)
length(unique(event_types))
storm$EVTYPE <- event_types
library(plyr)
casualties <- ddply(storm, .(EVTYPE), summarize,
fatalities = sum(FATALITIES),
injuries = sum(INJURIES))
head(casualties)
fatal_events <- head(casualties[order(casualties$fatalities, decreasing = T), ], 10)
injury_events <- head(casualties[order(casualties$injuries, decreasing = T), ], 10)
fatal_events
fatal_events[, c("EVTYPE", "fatalities")]
fatal_events[, c("EVTYPE", "fatalities")]
injury_events[, c("EVTYPE", "injuries")]
order(casualties$fatalities, decreasing = T)
injury_events[, c("EVTYPE", "injuries")]
